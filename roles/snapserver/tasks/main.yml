---

- name: Exit play if os_family is not Debian
  ansible.builtin.fail:
    msg: "ERROR: os_family of host {{ inventory_hostname }} is not Debian"
  when: ansible_facts['os_family'] != "Debian"

- name: Install snapserver package from repo
  ansible.builtin.apt:
    name: snapserver
    state: latest
    update_cache: yes
  when: snapserver_from_github is not defined or not snapserver_from_github

- block:

  - name: Get newest release from github
    ansible.builtin.get_url:
      url: "{{ snapserver_github | selectattr('release', 'equalto', ansible_facts.distribution_release) | map(attribute='source') | first }}"
      checksum: "sha256:{{ snapserver_github | selectattr('release', 'equalto', ansible_facts.distribution_release) | map(attribute='sha256sum') | first}}"
      dest: "{{ snapserver_github | selectattr('release', 'equalto', ansible_facts.distribution_release) | map(attribute='dest') | first }}"

  - name: Install dowloaded package
    ansible.builtin.apt:
      deb: "{{ snapserver_github | selectattr('release', 'equalto', ansible_facts.distribution_release) | map(attribute='dest') | first }}"
    notify:
      - Restart snapserver
    ignore_errors: "{{ ansible_check_mode }}"

  when: snapserver_from_github is defined and snapserver_from_github
  notify: Restart snapserver

- name: Install snapserver config
  ansible.builtin.template:
    src: templates/etc/snapserver.conf.j2
    dest: /etc/snapserver.conf
    backup: yes
  notify:
    - Restart snapserver

- name: Add snapserver user to audio group
  ansible.builtin.user:
    name: _snapserver
    append: yes
    groups: audio

- name: Enable snapserver to start on boot
  ansible.builtin.systemd:
    name: snapserver
    enabled: yes
  ignore_errors: "{{ ansible_check_mode }}"
