---

- name: Exit play if os_family is not Debian
  ansible.builtin.fail:
    msg: "ERROR: os_family of host {{ inventory_hostname }} is not Debian"
  when: ansible_facts['os_family'] != "Debian"

- name: Install snapclient package
  ansible.builtin.apt:
    name: snapclient
    state: latest
    update_cache: yes

- name: Disable upstream systemd unit
  ansible.builtin.systemd:
    name: "snapclient.service"
    enabled: no
    state: stopped
    masked: yes
    force: yes

- name: Disable autostart in upstream config file
  ansible.builtin.lineinfile:
    path: /etc/default/snapclient
    regexp: "^[ #]*START_SNAPCLIENT *="
    line: "START_SNAPCLIENT=false"
    state: present
    insertbefore: BOF
    backup: yes

- name: Add comment to upstream config file
  ansible.builtin.lineinfile:
    path: /etc/default/snapclient
    line: "# Autostart disabled here to support multiple snapclients, see /etc/snapclient.conf.d/"
    insertbefore: BOF
    state: present

- name: Create snapclient.conf.d directory
  ansible.builtin.file:
    path: /etc/snapclient.conf.d
    state: directory
    mode: 0755


####
#### Cleanup stale services and config files
####  ugly, 1st running version
####


- name: Populate service facts
  ansible.builtin.service_facts:

#
# Compute current list of items that are configured, needed to check if files/service should stay present
#   target list
#

- name: compute snapclient_config_list from snapclient_config
  ansible.builtin.set_fact:
    snapclient_config_list: "{{ snapclient_config | community.general.json_query('[*].name') }}"

#### cleanup stale systemd services
# snapclientservices: contains list of services as found in ansible_facts.services named snapclient@ in state running/stopped
# snapclientids: contains the pure ids (same format as config dict) (current state)
# snapclient_config_list: contains list of expected ids (target list)
# removes all instances in snapclientids (current state) but not in snapclientids (target list)

# this is basically: systemctl | grep ^snapclient@ and testing 
- name: Create list of stopped/running snapclient@ services
  ansible.builtin.set_fact:
    snapclientservices: "{{ snapclientservices | default ([]) + [ item.value.name ] }}"
  loop: "{{ ansible_facts.services | dict2items }}"
  when: ( item.value.state == 'running' or item.value.state == 'stopped' ) and item.value.name is match('snapclient@')

- name: Strip off generic parts
  ansible.builtin.set_fact:
    snapclientids: "{{ snapclientids | default ([]) + [ item | regex_replace('^snapclient@(.*).service','\\1') ] }}"
  loop: "{{ snapclientservices }}"

- name: print list of services that we leave as is
  ansible.builtin.debug:
    msg: "snapclient@{{ item }}.service, leaving for the moment"
  loop: "{{ snapclientids }}"
  when: item in snapclient_config_list

# Remove stale snapclient@ services
- name: Loop through list of found services and remove the undefined ones
  ansible.builtin.systemd:
    name: "snapclient@{{ item }}.service"
    enabled: no
    state: stopped
    masked: yes
  loop: "{{ snapclientids }}"
  when: item not in snapclient_config_list

#### cleanup stale config files
# configfiles: contains list of config files found (current state), (already stripped, ugly, take solution from above!)
# snapclient_config_list: contains list of expected ids (target list)
# deletes all files in configfiles (current state) but not in snapclient_config_list (target list)

- name: Register current list all config files
  ansible.builtin.shell: ls /etc/snapclient.conf.d | sed -e "s/\.conf$//"
  register: configfiles

- name: print files found that are expected to be here
  ansible.builtin.debug:
    msg: "{{ item }} found, leaving for the moment"
  loop: "{{ configfiles.stdout_lines }}"
  when: "item in snapclient_config_list"

- name: delete all files that are not in config list
  ansible.builtin.file: 
    path: "/etc/snapclient.conf.d/{{ item }}.conf"
    state: absent
  loop: "{{ configfiles.stdout_lines }}"
  when: "item not in snapclient_config_list"

#### end of cleanup stale config files
#### end of Cleanup stale services and config files

- name: Create snapclient config files
  ansible.builtin.template:
    src: templates/etc/snapclient.conf.d/snapclient.j2
    dest: "/etc/snapclient.conf.d/{{ item.name }}.conf"
    backup: no
  notify: Restart snapclients
  loop: "{{ snapclient_config }}"

- name: Copy snapclient@ systemd service file
  ansible.builtin.template:
    src: templates/etc/systemd/system/snapclient@.service.j2
    dest: /etc/systemd/system/snapclient@.service
    backup: no
  notify: Restart snapclients

- name: Enable and start snapclient@ services
  ansible.builtin.systemd:
    name: "snapclient@{{ item.name }}.service"
    enabled: yes
    daemon_reload: yes
    state: started
  loop: "{{ snapclient_config }}"
  loop_control:
    label: "{{ item.name }}"
