---

- name: Exit play if os_family is not Debian
  ansible.builtin.fail:
    msg: "ERROR: os_family of host {{ inventory_hostname }} is not Debian"
  when: ansible_facts['os_family'] != "Debian"

- name: Copy acable script
  ansible.builtin.copy:
    src: files/usr/local/bin/acable.sh
    dest: /usr/local/bin/acable.sh
    backup: yes
  notify: Restart acables

- name: Make acable script executable
  ansible.builtin.file:
    dest: /usr/local/bin/acable.sh
    mode: +x
  ignore_errors: "{{ ansible_check_mode }}"

- name: Create acable.conf.d directory
  ansible.builtin.file:
    path: /etc/acable.conf.d
    state: directory
    mode: 0755

####
#### Cleanup stale services and config files
####

- name: Create list of ids as configured in acable_config (target list)
  ansible.builtin.set_fact:
    idlistfromconfig: "{{ acable_config | selectattr('name') | map(attribute='name') }}"

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Get list of stopped/running acable@ services from ansible_facts.services
  ansible.builtin.set_fact:
    acableservices: "{{ acableservices | default ([]) + [ item.value.name ] }}"
  loop: "{{ ansible_facts.services | dict2items }}"
  when: item.value.name is match('acable@') and ( item.value.state == 'running' or item.value.state == 'stopped' )

- name: Create list of ids from acableservices (current service list)
  ansible.builtin.set_fact:
    idlistfromservices: "{{ idlistfromservices | default ([]) + [ item | regex_replace('^acable@(.*).service','\\1') ] }}"
  loop: "{{ acableservices }}"

- name: Print list of services that we leave as is
  ansible.builtin.debug:
    msg: "acable@{{ item }}.service, leaving untouched for now"
  loop: "{{ idlistfromservices }}"
  when: item in idlistfromconfig

- name: Remove acable@ services that are not configured (any more)
  ansible.builtin.systemd:
    name: "acable@{{ item }}.service"
    enabled: no
    state: stopped
    daemon_reload: yes
  loop: "{{ idlistfromservices }}"
  when: item not in idlistfromconfig

- name: Get list of config files (only files matching /etc/acable.conf.d/*.conf)
  ansible.builtin.find:
    paths: /etc/acable.conf.d
    use_regex: yes
    patterns: ['^.*\.conf']
    recurse: no
  register: acableconfigs

- name: Create list of ids from snapclientconfigs (current config file list)
  ansible.builtin.set_fact:
    idlistfromfiles: "{{ idlistfromfiles | default ([]) + [ item.path | regex_replace('^/etc/acable.conf.d/(.*).conf', '\\1') ] }}"
  loop: "{{ acableconfigs.files }}"
  loop_control:
    label: "{{ item.path }}"

- name: Print list of files that we leave as is
  ansible.builtin.debug: 
    msg: "file for configured {{ item }} found, leaving untouched for now"
  loop: "{{ idlistfromfiles }}" 
  when: "item in idlistfromconfig"

- name: Remove files that are not configured (any more)
  ansible.builtin.file: 
    path: "/etc/acable.conf.d/{{ item }}.conf"
    state: absent
  loop: "{{ idlistfromfiles }}"
  when: "item not in idlistfromconfig"

####
#### End cleanup stale services and config files
####


- name: Create acable config files
  ansible.builtin.template:
    src: templates/etc/acable.conf.d/acable.conf.j2
    dest: "/etc/acable.conf.d/{{ item.name }}.conf"
    backup: no
  notify: Restart acables
  loop: "{{ acable_config }}"

- name: Copy acable@ systemd service file
  ansible.builtin.template:
    src: templates/etc/systemd/system/acable@.service.j2
    dest: /etc/systemd/system/acable@.service
    backup: no
  notify: Restart acables

- name: Start and enable acable@ services
  ansible.builtin.systemd:
    name: "acable@{{ item.name }}.service"
    enabled: yes
    daemon_reload: yes
    state: started
  loop: "{{ acable_config }}"
  loop_control:
    label: "{{ item.name }}"
  ignore_errors: "{{ ansible_check_mode }}"
